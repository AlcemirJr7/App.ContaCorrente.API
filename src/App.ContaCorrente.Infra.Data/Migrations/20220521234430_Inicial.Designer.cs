// <auto-generated />
using System;
using App.ContaCorrente.Infra.Data.Contexto;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.ContaCorrente.Infra.Data.Migrations
{
    [DbContext(typeof(AppDbContexto))]
    [Migration("20220521234430_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.Banco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Bancos");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.Correntista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Agencia")
                        .HasColumnType("int");

                    b.Property<int>("BancoId")
                        .HasColumnType("int");

                    b.Property<long>("Conta")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DataEncerramento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlagConta")
                        .HasColumnType("int");

                    b.Property<int>("PessoaId")
                        .HasColumnType("int");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenhaConfirmacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("PessoaId");

                    b.ToTable("Correntistas");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.Emprestimo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CorrentistaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEfetivacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlagEstado")
                        .HasColumnType("int");

                    b.Property<int>("FlagProcesso")
                        .HasColumnType("int");

                    b.Property<decimal>("Juros")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("QtdParcelas")
                        .HasColumnType("int");

                    b.Property<int>("TipoEmprestimo")
                        .HasColumnType("int");

                    b.Property<int>("TipoFinalidade")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasPrecision(25, 2)
                        .HasColumnType("decimal(25,2)");

                    b.Property<decimal>("ValorParcela")
                        .HasPrecision(25, 2)
                        .HasColumnType("decimal(25,2)");

                    b.HasKey("Id");

                    b.HasIndex("CorrentistaId");

                    b.ToTable("Emprestimos");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Cep")
                        .HasColumnType("int");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NomeRua")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("NumeroRua")
                        .HasColumnType("int");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("Id");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.Historico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TipoDebitoCredito")
                        .HasPrecision(1)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Historicos");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.Lancamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CorrentistaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataLancamento")
                        .HasColumnType("datetime2");

                    b.Property<int>("HistoricoId")
                        .HasColumnType("int");

                    b.Property<string>("Observacao")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("Valor")
                        .HasPrecision(25, 2)
                        .HasColumnType("decimal(25,2)");

                    b.HasKey("Id");

                    b.HasIndex("CorrentistaId");

                    b.HasIndex("HistoricoId");

                    b.ToTable("Lancamentos");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.LancamentoFuturo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CorrentistaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLancamento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataParaLancamento")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlagLancamento")
                        .HasColumnType("int");

                    b.Property<int>("HistoricoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasPrecision(25, 2)
                        .HasColumnType("decimal(25,2)");

                    b.HasKey("Id");

                    b.HasIndex("CorrentistaId");

                    b.HasIndex("HistoricoId");

                    b.ToTable("LancamentosFuturos");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.LocalTrabalhoPessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NomeEmpresa")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<long>("NumeroDocumento")
                        .HasColumnType("bigint");

                    b.Property<long>("NumeroTelefone1")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumeroTelefone2")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Salario1")
                        .HasPrecision(25, 2)
                        .HasColumnType("decimal(25,2)");

                    b.Property<decimal?>("Salario2")
                        .HasPrecision(25, 2)
                        .HasColumnType("decimal(25,2)");

                    b.HasKey("Id");

                    b.ToTable("LocalTrabalhoPessoas");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.Logs.LogContaCorrente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CorrentistaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataLog")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescricaoLog")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CorrentistaId");

                    b.ToTable("LogContaCorrente");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.Logs.LogSistema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataLog")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescricaoLog")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogSistema");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.Pagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CodigoBarra")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CorrentistaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataGeracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumeroDocumento")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasPrecision(25, 2)
                        .HasColumnType("decimal(25,2)");

                    b.HasKey("Id");

                    b.HasIndex("CorrentistaId");

                    b.ToTable("Pagamentos");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.ParcelasEmprestimo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DataPagamento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmprestimoId")
                        .HasColumnType("int");

                    b.Property<int>("SeqParcelas")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasPrecision(25, 2)
                        .HasColumnType("decimal(25,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmprestimoId");

                    b.ToTable("ParcelasEmprestimos");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<int>("LocalTrabalhoPessoaId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NomeEmpresa")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("NumeroDocumento")
                        .HasColumnType("bigint");

                    b.Property<long>("NumeroTelefone1")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumeroTelefone2")
                        .HasColumnType("bigint");

                    b.Property<int>("TipoPessoa")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("LocalTrabalhoPessoaId");

                    b.ToTable("Pessoas");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.SaldoContaCorrente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CorrentistaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataUltimaTransacao")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LimiteChequeEspecial")
                        .HasPrecision(25, 2)
                        .HasColumnType("decimal(25,2)");

                    b.Property<decimal>("SaldoConta")
                        .HasPrecision(25, 2)
                        .HasColumnType("decimal(25,2)");

                    b.HasKey("Id");

                    b.HasIndex("CorrentistaId");

                    b.ToTable("SaldoContaCorrente");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.Transferencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Agencia")
                        .HasColumnType("int");

                    b.Property<int?>("BancoId")
                        .HasColumnType("int");

                    b.Property<int?>("CorrentistaEnviaId")
                        .HasColumnType("int");

                    b.Property<int?>("CorrentistaRecebeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataTransferencia")
                        .HasColumnType("datetime2");

                    b.Property<long?>("NumeroConta")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Valor")
                        .HasPrecision(25, 2)
                        .HasColumnType("decimal(25,2)");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.HasIndex("CorrentistaEnviaId");

                    b.HasIndex("CorrentistaRecebeId");

                    b.ToTable("Transferencias");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.Correntista", b =>
                {
                    b.HasOne("App.ContaCorrente.Domain.Entidades.Banco", "Banco")
                        .WithMany()
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.ContaCorrente.Domain.Entidades.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banco");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.Emprestimo", b =>
                {
                    b.HasOne("App.ContaCorrente.Domain.Entidades.Correntista", "Correntista")
                        .WithMany()
                        .HasForeignKey("CorrentistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Correntista");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.Lancamento", b =>
                {
                    b.HasOne("App.ContaCorrente.Domain.Entidades.Correntista", "Correntista")
                        .WithMany()
                        .HasForeignKey("CorrentistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.ContaCorrente.Domain.Entidades.Historico", "Historico")
                        .WithMany()
                        .HasForeignKey("HistoricoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Correntista");

                    b.Navigation("Historico");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.LancamentoFuturo", b =>
                {
                    b.HasOne("App.ContaCorrente.Domain.Entidades.Correntista", "Correntista")
                        .WithMany()
                        .HasForeignKey("CorrentistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.ContaCorrente.Domain.Entidades.Historico", "Historico")
                        .WithMany()
                        .HasForeignKey("HistoricoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Correntista");

                    b.Navigation("Historico");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.Logs.LogContaCorrente", b =>
                {
                    b.HasOne("App.ContaCorrente.Domain.Entidades.Correntista", "Correntista")
                        .WithMany()
                        .HasForeignKey("CorrentistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Correntista");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.Pagamento", b =>
                {
                    b.HasOne("App.ContaCorrente.Domain.Entidades.Correntista", "Correntista")
                        .WithMany()
                        .HasForeignKey("CorrentistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Correntista");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.ParcelasEmprestimo", b =>
                {
                    b.HasOne("App.ContaCorrente.Domain.Entidades.Emprestimo", "Emprestimo")
                        .WithMany()
                        .HasForeignKey("EmprestimoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emprestimo");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.Pessoa", b =>
                {
                    b.HasOne("App.ContaCorrente.Domain.Entidades.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.ContaCorrente.Domain.Entidades.LocalTrabalhoPessoa", "LocalTrabalhoPessoa")
                        .WithMany()
                        .HasForeignKey("LocalTrabalhoPessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");

                    b.Navigation("LocalTrabalhoPessoa");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.SaldoContaCorrente", b =>
                {
                    b.HasOne("App.ContaCorrente.Domain.Entidades.Correntista", "Correntista")
                        .WithMany()
                        .HasForeignKey("CorrentistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Correntista");
                });

            modelBuilder.Entity("App.ContaCorrente.Domain.Entidades.Transferencia", b =>
                {
                    b.HasOne("App.ContaCorrente.Domain.Entidades.Banco", "Banco")
                        .WithMany()
                        .HasForeignKey("BancoId");

                    b.HasOne("App.ContaCorrente.Domain.Entidades.Correntista", "CorrentistaEnvia")
                        .WithMany()
                        .HasForeignKey("CorrentistaEnviaId");

                    b.HasOne("App.ContaCorrente.Domain.Entidades.Correntista", "CorrentistaRecebe")
                        .WithMany()
                        .HasForeignKey("CorrentistaRecebeId");

                    b.Navigation("Banco");

                    b.Navigation("CorrentistaEnvia");

                    b.Navigation("CorrentistaRecebe");
                });
#pragma warning restore 612, 618
        }
    }
}
